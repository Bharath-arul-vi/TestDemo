name: Manual payflow deployment

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Select the type of environment'
        required: true
        type: choice
        options:
          - development
          - sandbox

      development_environment:
        description: 'Select the development environment'
        required: false
        type: choice
        options:
          - ""
          - Dev_server_dfs1_dev
          - Dev_server_dfs2_dev

      sandbox_environment:
        description: 'Select the sandbox environment'
        required: false
        type: choice
        options:
          - ""
          - Zurich_sandbox_dfs1_tst
          - UK_sandbox_001_crx_t_dfs_l
          - UK_sandbox_001_chn_t_dfs_l

env:
  JAVA_VERSION: 21
  MAVEN_VERSION: 3.9.5
  SLACK_RELEASE_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}

jobs:
  application-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Branch Environment Variable
        run: |
          echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "Branch is set to: ${{ github.ref_name }}"

      - name: Setup Java and Maven
        uses: ./.github/actions/setup-java-maven
        with:
          java-version: ${{ env.JAVA_VERSION }}
          maven-version: ${{ env.MAVEN_VERSION }}

      - name: Validate Inputs
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "development" ]]; then
            if [[ -z "${{ github.event.inputs.development_environment }}" ]]; then
              echo "Error: You must select a development environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.development_environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment_type }}" == "sandbox" ]]; then
            if [[ -z "${{ github.event.inputs.sandbox_environment }}" ]]; then
              echo "Error: You must select a sandbox environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.sandbox_environment }}" >> $GITHUB_ENV
          else
            echo "Error: Invalid environment type."
            exit 1
          fi

      - name: Set Deployment Server for selected Environments
        run: |
          TARGET_GROUP="${{ env.TARGET_ENVIRONMENT }}"
          echo "Looking up host for group: $TARGET_GROUP"
          TARGET_HOST=$(ansible-inventory -i .github/deploy/inventory.ini --list | jq -r ".\"$TARGET_GROUP\".hosts[0]")
          if [ -z "$TARGET_HOST" ]; then
            echo "Error: No host found for group '$TARGET_GROUP'."
            exit 1
          fi
          echo "TARGET_SERVER=$TARGET_HOST" >> $GITHUB_ENV
          echo "Target server set to: $TARGET_HOST"

            - name: Determine Active Server
        id: determine-active
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "sandbox" ]]; then
            API_URL="https://api.sandbox.datatrans.com"
          elif [[ "${{ github.event.inputs.environment_type }}" == "development" ]]; then
            API_URL="https://api-dev.datatrans.biz"
          else
            echo "Error: Unsupported environment type '${{ github.event.inputs.environment_type }}'."
            exit 1
          fi
          
          ACTIVE_SERVER=$(curl -s "$API_URL/pay-flow/actuator/info" | jq -r '.activeServer // empty')
          if [[ -z "$ACTIVE_SERVER" ]]; then
            echo "Error: Unable to determine active server from the API."
            exit 1
          fi
          
          if [[ "${{ env.TARGET_SERVER }}" == "$ACTIVE_SERVER" ]]; then
            echo "Error: You are attempting to deploy to the active server '$ACTIVE_SERVER'. Deployment is not allowed." | tee /tmp/error_message.txt
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":red_circle: *Deployment Error:* You are attempting to deploy to the active server "$ACTIVE_SERVER". Deployment is not allowed."
                    }
                  }
                ]
              }' "${{ env.SLACK_RELEASE_WEBHOOK }}"
            exit 1
          fi
          
          echo "ACTIVE_SERVER=$ACTIVE_SERVER" >> $GITHUB_ENV
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "Active server: $ACTIVE_SERVER

      - name: Build the Application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn package -DskipITs -DskipTests -Djansi.tmpdir=/var/tmp

      - name: Deploy to Target Server
        run: |
          TARGET_SERVER="${{ env.TARGET_SERVER }}"
          echo "Deploying to server: $TARGET_SERVER"

          ansible-playbook -i .github/deploy/inventory.ini .github/deploy/ansible-deployment-playbook.yml --limit $TARGET_SERVER -vvvv
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Validate Deployment
        run: |
          curl -f "${{ env.API_URL }}/pay-flow/actuator/health" || (echo "Health check failed" && exit 1)

      - name: Notify Deployment Success
        if: success()
        uses: ./.github/workflows/slack-notify.yml
        with:
          message: ":large_green_circle: *Pay-flow Deployment Successful.*"
          branch: "$BRANCH"
          environment: "${{ env.TARGET_SERVER }}"
          slack_webhook_url: "${{ env.SLACK_RELEASE_WEBHOOK }}"


  integration-test:
    needs: application-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables for Reusable Workflow
        run: |
          echo "BRANCH=${{ env.BRANCH }}" >> $GITHUB_ENV
          echo "BASE_URL=${{ env.API_URL }}" >> $GITHUB_ENV
          echo "JAVA_VERSION=${{ env.JAVA_VERSION }}" >> $GITHUB_ENV
          echo "MAVEN_VERSION=${{ env.MAVEN_VERSION }}" >> $GITHUB_ENV

      - name: Invoke Reusable Workflow
        uses: ./.github/workflows/integration-test.yml

  create-tag:
    runs-on: ubuntu-latest
    needs: [application-deployment, integration-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Deployed Artifact Version
        id: version_check
        run: |
          # Fetch the deployed artifact version from the API
          ARTIFACT_VERSION=$(curl -s "$API_URL/pay-flow/actuator/info" | jq -r '.deployed-artifact // "0.0.0"')
          
          # Increment version by 0.0.1 or set to 0.0.1 if empty
          if [[ "$ARTIFACT_VERSION" == "0.0.0" || -z "$ARTIFACT_VERSION" ]]; then
          NEW_VERSION="0.0.1"
          else
          # Increment the patch version by 0.0.1
          IFS='.' read -r -a VERSION_PARTS <<< "$ARTIFACT_VERSION"
          PATCH_VERSION=${VERSION_PARTS[2]}
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Deployed version: $ARTIFACT_VERSION, New version: $NEW_VERSION"

      - name: Check if Tag Already Exists
        id: tag_check
        run: |
          TAG_NAME="payflow-release-${{ env.NEW_VERSION }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists."
            echo "tag_exists=true" >> $GITHUB_ENV
          else
            echo "tag_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Git Tag
        if: env.tag_exists == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "payflow-release-${{ env.NEW_VERSION }}"
          git push origin "payflow-release-${{ env.NEW_VERSION }}"

      - name: Notify if Tag Exists
        if: env.tag_exists == 'true'
        run: echo "The tag payflow-release-${{ env.NEW_VERSION }} already exists. Skipping tagging."
