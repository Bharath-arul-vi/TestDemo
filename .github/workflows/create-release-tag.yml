name: Manual deployment

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Select the type of environment'
        required: true
        type: choice
        options:
          - development
          - sandbox
          - prod

      development_environment:
        description: 'Select the development environment'
        required: false
        type: choice
        options:
          - ""
          - Dev_server_dfs1_dev
          - Dev_server_dfs2_dev

      sandbox_environment:
        description: 'Select the sandbox environment'
        required: false
        type: choice
        options:
          - ""
          - UK_sandbox_001_crx_t_dfs_l
          - UK_sandbox_001_chn_t_dfs_l

      prod_environment:
        description: 'Select the production environment'
        required: false
        type: choice
        options:
          - ""
          - UK_prod_001_crx_p_dfs_l
          - UK_prod_001_chn_p_dfs_l

      create_release_tag:
        description: 'Should create a release tag?'
        required: true
        type: boolean
        default: false

      deploy_active_server:
        description: 'Should deploy in active server?'
        required: true
        type: boolean
        default: false

env:
  JAVA_VERSION: 21
  MAVEN_VERSION: 3.9.5
  SLACK_RELEASE_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
  X_API_KEY_SANDBOX: ${{ secrets.X_API_KEY_SANDBOX }}
  X_API_KEY_DEV: ${{ secrets.X_API_KEY_DEV }}
  X_API_KEY_PROD: ${{ secrets.X_API_KEY_PROD }}
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true


jobs:
  watchdog:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for 30 Minutes or Until Approval/Rejection
        id: sleep-until-approval
        run: |
          echo "Starting watchdog for 30 minutes or until approval/rejection..."
          for i in {1..3}; do
            echo "Checking if approval has been granted or rejected..."
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
            echo "Full API Response:"
            echo "$response" | jq '.'
  
            status=$(echo "$response" | jq -r '.status // "unknown"')
            conclusion=$(echo "$response" | jq -r '.conclusion // "none"')

            approval_step_status=$(echo "$response" | jq -r '.jobs[] | select(.name=="application-deployment") | .status // "null"')
            approval_step_conclusion=$(echo "$response" | jq -r '.jobs[] | select(.name=="application-deployment") | .conclusion // "null"')

            echo "Approval step status :  $approval_step_status "
            echo "Approval step conclusion: $approval_step_conclusion"
            
            # Check the conclusion of the approval step
            if [[ "$approval_step_conclusion" == "failure" ]]; then
              echo "Approval rejected."
              exit 1
            elif [[ "$approval_step_status" == "completed" ]]; then
              echo "Approval granted. Proceeding with deployment."
              exit 0
            elif [[ "$approval_step_conclusion" == "null" ]]; then
              echo "Approval or rejection is still pending..."
              # Optionally handle the pending state by continuing the loop or waiting further
            else
              echo "Unexpected approval step conclusion: $approval_step_conclusion"
              exit 1
            fi
  
            echo "Approval or rejection is still pending..."
            sleep 60
          done
          echo "Timeout reached without approval or rejection."
          echo "${{ steps.sleep-until-approval.outcome }}"
          exit 1

      - name: Handle Approval Timeout or Rejection
        if: ${{ steps.sleep-until-approval.outcome == 'failure' }}
        run: |
          echo "Approval not granted within timeout or rejected. Cancelling workflow."
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel"


  application-deployment:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment_type == 'prod' && 'production' }}
    timeout-minutes: 2

    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
      api_url: ${{ steps.set-api-url.outputs.api_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Branch Environment Variable
        id: set-branch
        run: |
          echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT 

      - name: Validate Inputs
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "development" ]]; then
            if [[ -z "${{ github.event.inputs.development_environment }}" ]]; then
              echo "Error: You must select a development environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.development_environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment_type }}" == "sandbox" ]]; then
            if [[ -z "${{ github.event.inputs.sandbox_environment }}" ]]; then
              echo "Error: You must select a sandbox environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.sandbox_environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment_type }}" == "prod" ]]; then
            if [[ -z "${{ github.event.inputs.prod_environment }}" ]]; then
              echo "Error: You must select a prod environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.prod_environment }}" >> $GITHUB_ENV
          else
            echo "Error: Invalid environment type."
            exit 1
          fi

      - name: Deploy to Development or Sandbox
        if: ${{ github.event.inputs.environment_type != 'prod' }}
        run: echo "Deploying to ${{ env.TARGET_ENVIRONMENT }}..."


      - name: Continue Deployment
        if: ${{ github.event.inputs.environment_type == 'prod' && steps.wait_approval.outcome == 'success' }}
        run: |
          echo "Approval received. Proceeding with deployment."
          echo "Deployment Target: ${{ env.TARGET_ENVIRONMENT }}"

