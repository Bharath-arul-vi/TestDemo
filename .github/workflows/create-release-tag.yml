name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (e.g., v0.0.1)"
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Up Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Determine Release Version
      id: determine-version
      run: |
        # Check if release_version input is provided
        if [[ -z "${{ github.event.inputs.release_version }}" ]]; then
          echo "No release version provided. Incrementing version from version.txt..."

          # Fetch current version from version.txt
          CURRENT_VERSION=$(cat version.txt)
          echo "Current version: $CURRENT_VERSION"

          # Increment the patch version
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH_VERSION=${VERSION_PARTS[2]}
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
        else
          # Use provided release_version
          NEW_VERSION="${{ github.event.inputs.release_version }}"
          echo "Using provided release version: $NEW_VERSION"
        fi

        # Output the new version
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

    - name: Check if Tag Already Exists
      id: check-tag
      run: |
        TAG_EXISTS=$(git tag -l "${{ env.new_version }}")
        if [[ -n "$TAG_EXISTS" ]]; then
          echo "Error: Tag '${{ env.new_version }}' already exists."
          exit 1
        fi
      continue-on-error: false

    - name: Update version.txt
      run: |
        echo "$NEW_VERSION" > version.txt
        cat version.txt

    - name: Commit and Push Changes
      run: |
        git add version.txt
        git commit -m "Release version ${{ env.new_version }}"
        git push origin main

    - name: Create Git Tag
      run: |
        git tag -a "${{ env.new_version }}" -m "Release version ${{ env.new_version }}"
        git push origin "${{ env.new_version }}"

    - name: Notify Success
      run: echo "Version ${{ env.new_version }} released and tagged successfully!"
