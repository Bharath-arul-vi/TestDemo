name: Prod Payflow Deployment

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Select the type of environment'
        required: true
        type: choice
        options:
          - development
          - sandbox
          - production

      development_environment:
        description: 'Select the development environment'
        required: false
        type: choice
        options:
          - ""
          - Dev_server_dfs1_dev
          - Dev_server_dfs2_dev

      sandbox_environment:
        description: 'Select the sandbox environment'
        required: false
        type: choice
        options:
          - ""
          - UK_sandbox_001_crx_t_dfs_l
          - UK_sandbox_001_chn_t_dfs_l

      prod_environment:
        description: 'Select the production environment'
        required: false
        type: choice
        options:
          - ""
          - UK_prod_001_crx_p_dfs_l
          - UK_prod_001_chn_p_dfs_l
        
      create_release_tag:
        description: 'Should create a release tag?'
        required: true
        type: boolean
        default: false

env:
  JAVA_VERSION: 21
  MAVEN_VERSION: 3.9.5

jobs:
  watchdog:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment_type == 'prod' }}
    steps:
      - name: Wait for 30 Minutes or Until Approval/Rejection
        id: sleep-until-approval
        run: |
          echo "Starting watchdog for 30 minutes or until approval/rejection..."
          for i in {1..5}; do
            echo "Checking if approval has been granted or rejected..."
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          
            approval_step_status=$(echo "$response" | jq -r '.jobs[] | select(.name=="application-deployment") | .status // "null"')
            approval_step_conclusion=$(echo "$response" | jq -r '.jobs[] | select(.name=="application-deployment") | .conclusion // "null"')
          
            echo "Approval step status :  $approval_step_status "
            echo "Approval step conclusion: $approval_step_conclusion"
          
            # Check the conclusion of the approval step
            if [[ "$approval_step_conclusion" == "failure" ]]; then
              echo "Approval rejected."
              exit 1
            elif [[ "$approval_step_status" == "in_progress" ]]; then
              echo "Approval granted. Proceeding with deployment."
              exit 0
            elif [[ "$approval_step_conclusion" == "null" ]]; then
              echo "Approval or rejection is still pending..."
              # Optionally handle the pending state by continuing the loop or waiting further
            else
              echo "Unexpected approval step conclusion: $approval_step_conclusion"
              exit 1
            fi
            sleep 60
          done
          echo "Timeout reached without approval or rejection.."
          timeout="true"
          echo "timeout=$timeout" >> $GITHUB_ENV
          exit 0

      - name: Check If Approval Has Been Granted
        if: ${{ env.timeout == 'true' }}
        run: |
          echo "Approval not granted within timeout. Cancelling workflow."
          response=$(curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel")
          echo "Response: $response"

  application-deployment:
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
        
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Determine input tag
        id: tag-check
        run: |
          if [[ "${{ github.ref_type }}" != "tag" ]]; then
            echo "Error: Production deployments can only be triggered by tags, not branches."
            exit 1
          fi
          echo "TAG_VERSION=${{ github.ref_name }}" >> "$GITHUB_ENV"


      - name: Send Slack Notification Before Approval
        run: echo "Slack notification sent for the Version {{ $env.TAG_VERSION }}"

      - name: Get deployment approval data from GitHub API
        id: fetch_approval_data
        run: |
          # GitHub API for fetching deployment information
          REPO_OWNER="Bharath-arul-vi"
          REPO_NAME="TestDemo"
        
          # Fetch all deployments (use a specific deployment ID if needed)
          DEPLOYMENTS=$(curl -s \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/deployments")
        
          # echo "Deployments Data: $DEPLOYMENTS"
        
          # Get the actor who triggered the deployment (workflow actor)
          TRIGGERED_BY="${{ github.actor }}"
          echo "TRIGGERED_BY Data: $TRIGGERED_BY"
        
          # Fetch deployment statuses to find the approval data
          DEPLOYMENT_STATUS=$(curl -s \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/deployments/$(echo $DEPLOYMENTS | jq -r '.[0].id')/statuses")
        
          echo "Deployment Status Data: $DEPLOYMENT_STATUS"
        
          # Find the person who approved the deployment
           APPROVED_BY=$(echo "$DEPLOYMENT_STATUS" | jq -r '.[] | select(.state=="success" or .state=="waiting" or .state=="in_progress") | .creator.login' | head -n 1)
          echo "APPROVED_BY Data: $APPROVED_BY"

        
          # Check if the trigger and approval are the same person
          if [ "$TRIGGERED_BY" == "$APPROVED_BY" ]; then
            echo "❌ You (as $TRIGGERED_BY) cannot approve your own deployment. Please ask one of the assigned reviewers."
            exit 1
          else
            echo "✅ Deployment triggered by $TRIGGERED_BY. Approval required from assigned reviewers."
          fi


      - name: Validate Inputs
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "development" ]]; then
            if [[ -z "${{ github.event.inputs.development_environment }}" ]]; then
              echo "Error: You must select a development environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.development_environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment_type }}" == "sandbox" ]]; then
            if [[ -z "${{ github.event.inputs.sandbox_environment }}" ]]; then
              echo "Error: You must select a sandbox environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.sandbox_environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment_type }}" == "production" ]]; then
            if [[ -z "${{ github.event.inputs.prod_environment }}" ]]; then
              echo "Error: You must select a prod environment."
              exit 1
            fi
            if [[ "${{ github.event.inputs.create_release_tag }}" == "true" ]]; then
            echo "Error: Cannot create a release tag for the 'prod' environment!"
            exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.prod_environment }}" >> $GITHUB_ENV
          else
            echo "Error: Invalid environment type."
            exit 1
          fi
        

      - name: Request Approval
        run: echo "Waiting for manual approval through GitHub environment."

      - name: Approve Deployment
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'manual-payflow-deployment.yml',
              ref: 'main', // Specify the branch
              inputs: {
                environment_type: 'prod',
                approved: 'true'
              }
            });





      # Step 1: Validate Inputs
      - name: Validate Inputs
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "prod" ]]; then
            if [[ -z "${{ github.event.inputs.prod_environment }}" ]]; then
              echo "Error: You must select a production environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.prod_environment }}" >> $GITHUB_ENV
          else
            echo "Non-prod deployment detected. Proceeding without approval."
            exit 0
          fi
      

      # Step 4: Proceed After Approval
      - name: Continue Deployment
        if: success()
        run: echo "Approval received. Proceeding with deployment."

      # Add additional deployment steps below
      - name: Deploy Application
        run: echo "Deploying application to ${{ env.TARGET_ENVIRONMENT }}..."
