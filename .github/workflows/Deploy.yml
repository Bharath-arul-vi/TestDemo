name: Prod Payflow Deployment

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Select the type of environment'
        required: true
        type: choice
        options:
          - development
          - sandbox
          - prod

      development_environment:
        description: 'Select the development environment'
        required: false
        type: choice
        options:
          - ""
          - Dev_server_dfs1_dev
          - Dev_server_dfs2_dev

      sandbox_environment:
        description: 'Select the sandbox environment'
        required: false
        type: choice
        options:
          - ""
          - UK_sandbox_001_crx_t_dfs_l
          - UK_sandbox_001_chn_t_dfs_l

      prod_environment:
        description: 'Select the production environment'
        required: false
        type: choice
        options:
          - ""
          - UK_prod_001_crx_p_dfs_l
          - UK_prod_001_chn_p_dfs_l

env:
  JAVA_VERSION: 21
  MAVEN_VERSION: 3.9.5

jobs:
  application-deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
        
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 1: Validate Inputs
      - name: Validate Inputs
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "prod" ]]; then
            if [[ -z "${{ github.event.inputs.prod_environment }}" ]]; then
              echo "Error: You must select a production environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.prod_environment }}" >> $GITHUB_ENV
          else
            echo "Non-prod deployment detected. Proceeding without approval."
            exit 0
          fi

      # Step 2: Create GitHub Issue for Approval
      - name: Create GitHub Issue
        id: create_issue
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d '{"title":"Production Deployment Approval Required","body":"A production deployment for `${{ github.event.inputs.prod_environment }}` has been triggered.\n\n**Action Required:**\n- Add the `approved` label to this issue to approve the deployment.","labels":["approval"]}'

      # Step 3: Wait for Approval
      - name: Wait for Approval
        id: wait_approval
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = ${{ steps.create_issue.outputs.issue-number }};
            const label_to_wait = 'approved';
            const timeout = 7200; // Timeout in seconds (e.g., 2 hours)
            const interval = 60;  // Polling interval in seconds

            const startTime = Date.now();

            while ((Date.now() - startTime) / 1000 < timeout) {
              // Fetch the current state of the issue
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
              });

              // Check if the 'approved' label is present
              const labels = issue.labels.map(label => label.name);
              if (labels.includes(label_to_wait)) {
                console.log(`Issue #${issue_number} has been approved.`);
                return;
              }

              console.log(`Waiting for approval on issue #${issue_number}...`);
              // Wait for the specified interval before checking again
              await new Promise(resolve => setTimeout(resolve, interval * 1000));
            }

            // If timeout is reached without approval, fail the step
            core.setFailed(`Timed out waiting for approval on issue #${issue_number}.`);

      # Step 4: Proceed After Approval
      - name: Continue Deployment
        if: success()
        run: echo "Approval received. Proceeding with deployment."

      # Add additional deployment steps below
      - name: Deploy Application
        run: echo "Deploying application to ${{ env.TARGET_ENVIRONMENT }}..."
