name: Prod payflow deployment

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Select the type of environment'
        required: true
        type: choice
        options:
          - development
          - sandbox
          - prod

      development_environment:
        description: 'Select the development environment'
        required: false
        type: choice
        options:
          - ""
          - Dev_server_dfs1_dev
          - Dev_server_dfs2_dev

      sandbox_environment:
        description: 'Select the sandbox environment'
        required: false
        type: choice
        options:
          - ""
          - UK_sandbox_001_crx_t_dfs_l
          - UK_sandbox_001_chn_t_dfs_l

      prod_environment:
        description: 'Select the production environment'
        required: false
        type: choice
        options:
          - ""
          - UK_prod_001_crx_p_dfs_l
          - UK_prod_001_chn_p_dfs_l

      create_release_tag:
        description: 'Should create a release tag?'
        required: true
        type: boolean
        default: false

      deploy_active_server:
        description: 'Should deploy in active server?'
        required: true
        type: boolean
        default: false

env:
  JAVA_VERSION: 21
  MAVEN_VERSION: 3.9.5
  SLACK_RELEASE_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
  X_API_KEY_SANDBOX: ${{ secrets.X_API_KEY_SANDBOX }}
  X_API_KEY_DEV: ${{ secrets.X_API_KEY_DEV }}
  X_API_KEY_PROD: ${{ secrets.X_API_KEY_PROD }}
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      target_environment: ${{ steps.set-target-environment.outputs.target_environment }}
    steps:
      - name: Validate Inputs
        id: set-target-environment
        run: |
          if [[ "${{ github.event.inputs.environment_type }}" == "development" ]]; then
            if [[ -z "${{ github.event.inputs.development_environment }}" ]]; then
              echo "Error: You must select a development environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.development_environment }}" >> $GITHUB_ENV
            echo "target_environment=${{ github.event.inputs.development_environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment_type }}" == "sandbox" ]]; then
            if [[ -z "${{ github.event.inputs.sandbox_environment }}" ]]; then
              echo "Error: You must select a sandbox environment."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.sandbox_environment }}" >> $GITHUB_ENV
            echo "target_environment=${{ github.event.inputs.sandbox_environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment_type }}" == "prod" ]]; then
            if [[ -z "${{ github.event.inputs.prod_environment }}" ]]; then
              echo "Error: You must select a production environment."
              exit 1
            fi
            if [[ "${{ github.ref_type }}" != "tag" ]]; then
              echo "Error: Production deployments can only be triggered by tags, not branches."
              exit 1
            fi
            echo "TARGET_ENVIRONMENT=${{ github.event.inputs.prod_environment }}" >> $GITHUB_ENV
            echo "target_environment=${{ github.event.inputs.prod_environment }}" >> $GITHUB_OUTPUT
          else
            echo "Error: Invalid environment type."
            exit 1

  approve-prod-deployment:
    if: ${{ github.event.inputs.environment_type == 'prod' }}
    runs-on: ubuntu-latest
    needs: validate-inputs
    steps:
      - name: Await Manual Approval
        uses: hmarr/await-approval@v1
        with:
          approvers: team-slug  # Replace with GitHub team or user for approval
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-application:
    runs-on: ubuntu-latest
    needs: [validate-inputs, approve-prod-deployment]
    steps:
      - name: Deploy to Target Environment
        run: |
          echo "Deploying to ${{ needs.validate-inputs.outputs.target_environment }}..."
